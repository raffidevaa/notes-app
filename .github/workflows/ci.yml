name: CI - Notes App

on:
  push:
    branches: [main, master]
  pull_request:

permissions:
  contents: read
  packages: read

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app
  PYTHON_VERSION: "3.11"

jobs:
  # 1) Unit Test
  test:
    name: Unit Test (pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi

      - name: Run pytest
        run: |
          PYTHONPATH=. pytest -q --maxfail=1

  # 2) SAST (Bandit)
  sast:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run bandit
        run: |
          # Sesuaikan folder bila perlu (mis. 'app' / 'src')
          bandit -r app -q

  # 3) SCA (pip-audit)
  sca:
    name: SCA (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install deps + pip-audit
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi
          pip install pip-audit
      - name: Run pip-audit (no ignore)
        run: |
          # Gagal bila ada vuln (tanpa --ignore / || true)
          pip-audit -r requirements.txt ${DEV:+-r dev-requirements.txt} --strict
        env:
          DEV: ${{ hashFiles('dev-requirements.txt') }}

  # 4) Secret Scan (Gitleaks)
  secrets_scan:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v --redact --source="."
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # optional kalau punya

  # 5) Build & Push Docker (hanya jika semua job security lulus)
  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, sast, sca, secrets_scan]
    if: ${{ always() && needs.test.result == 'success' && needs.sast.result == 'success' && needs.sca.result == 'success' && needs.secrets_scan.result == 'success' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 6) Image Scan (Trivy) dari Docker Hub
  image_scan:
    name: Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1
      - name: Scan the exact commit SHA tag
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1
